<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	id="WebApp_ID" version="3.1">
	<display-name>wsn</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<!-- 1、启动Spring的容器 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:applicationContext.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<!-- 2、 spring的前端控制器 拦截所有请求 -->
	<servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器，适配器等) 如果不配置contextConfigLoaction，默认加载的是/WEB-INF/servlet名称-servlet.xml(springmvc-servlet.xml) -->
		<!-- <init-param> -->
		<!-- <param-name>contextConfigLocation</param-name> -->
		<!-- <param-value>classpath:springmvc.xml</param-value> -->
		<!-- </init-param> -->
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<!-- 第一种:*.action。访问以.action结尾由DispatcherServlet进行解析； 第二种:/，所有访问的地址都由DispatcherServlet进行解析，对于静态文件的解析， 
			我们要配置不让DispatcherServlet进行解析。使用此种方法可以实现RESTful风格的url； 第三种:/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由 
			DispatcherServlet进行解析jsp地址，它不能根据jsp页面找到Handler，会报错 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 3、字符编码过滤器，一定放在所有过滤器之前 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceRequestEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<!-- 3filter-mapping用于拦截所有请求 -->
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 4、使用Rest风格的URI，把页面上的post请求转为delete或者put请求 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>